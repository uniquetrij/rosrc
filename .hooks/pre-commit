#!/bin/bash
# =============================================================================
# Git Pre-Commit Hook
# -----------------------------------------------------------------------------
# This script automatically updates the version, date, and the current commit
# hash in the specified files before every commit. It ensures that the script
# metadata remains up-to-date with each change.
#
# Author: Trijeet Modak
# Date: April 26, 2025
# =============================================================================

if [ -z "$GIT_DIR" ] && [ ! -d ".git" ] || [ -z "$GIT_INDEX_FILE" ]; then
    HOOKS_DIR=$(git rev-parse --absolute-git-dir)/.git/hooks
    ln -s $(realpath "$0") $HOOKS_DIR/"$0"
    chmod +x $HOOKS_DIR/"$0"
    echo "Hook <$0> installed as a symlink under $HOOKS_DIR"
    exit 1
fi

echo "Running pre-commit hook..."

# List of files to process
FILES=("./rosrc")

for FILE in "${FILES[@]}"; do
    # Check if the file has staged changes
    if ! git diff --cached --quiet -- "$FILE"; then
        echo "File '$FILE' has changes. Proceeding with version update..."

        VERSION_LINE=$(grep -n "Version:" "$FILE" | head -n 1 | cut -d: -f1)
        DATE_LINE=$(grep -n "Date:" "$FILE" | head -n 1 | cut -d: -f1)
        HASH_LINE=$(grep -n "Commit Hash:" "$FILE" | head -n 1 | cut -d: -f1)

        # Update the version
        if [ -n "$VERSION_LINE" ]; then
            CURRENT_VERSION=$(sed -n "${VERSION_LINE}p" "$FILE" | grep -oP '\d+\.\d+\.\d+')
            MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
            MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
            PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)

            # Increment the patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"

            # Replace the version in the file
            sed -i "${VERSION_LINE}s/$CURRENT_VERSION/$NEW_VERSION/" "$FILE"
            echo "Updated version to $NEW_VERSION in $FILE"
        else
            echo "Version line not found in $FILE"
            exit 1
        fi

        # Update the date
        if [ -n "$DATE_LINE" ]; then
            NEW_DATE=$(date +"%B %d, %Y")
            sed -i "${DATE_LINE}s/Date: .*/Date: $NEW_DATE/" "$FILE"
            echo "Updated date to $NEW_DATE in $FILE"
        else
            echo "Date line not found in $FILE"
            exit 1
        fi

        # Update the commit hash
        if [ -n "$HASH_LINE" ]; then
            COMMIT_HASH=$(git rev-parse HEAD)
            sed -i "${HASH_LINE}s/Commit Hash: .*/Commit Hash: $COMMIT_HASH/" "$FILE"
            echo "Updated commit hash to $COMMIT_HASH in $FILE"
        else
            echo "Commit hash line not found in $FILE"
            exit 1
        fi

        # Add the updated file to the commit
        git add "$FILE"
    else
        echo "No changes detected in '$FILE'. Skipping version update."
    fi
done
