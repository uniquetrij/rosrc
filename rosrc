export ROS_DISTRO=jazzy
export ROS_WS=~/ros2_ws
export ROS_LOCAL_SETUP=${ROS_WS}/install/setup.bash
export CONDA_HOME=/opt/miniconda3
export CONDA_EXEC=$CONDA_HOME/condabin/conda
export QT_QPA_PLATFORMTHEME=gtk2

rosws() {
  # Check if the workspace directory exists
  if [ ! -d "$ROS_WS" ]; then
    echo "游딩 error: $ROS_WS does not exist"
    return
  fi
  cd $ROS_WS
}

__rosrc() {

  rosrc() { source ~/.rosrc; }

  rosls() { colcon list; }

  rossrc() { cd $ROS_WS/src; }

  rosclean() {
    rosws
    rm -rf build/ install/ log/
    unset AMENT_PREFIX_PATH
    unset CMAKE_PREFIX_PATH
  }

  rosset() { source $ROS_LOCAL_SETUP; }

  __rosbuild() {
    rosws
    colcon build "$@" --symlink-install
    rosset
  }

  rosbuild() {
    # If no args then do rosls with serial number and ask user input
    if [ $# -eq 0 ]; then
      rosls | nl
      echo "Select package(s) to build, skip to build all:"
      read -a __packages
      # If the package name is empty then build all
      if [ -z "${__packages[*]}" ]; then
        __rosbuild --cmake-args -DPython3_FIND_VIRTUALENV="ONLY"
        return
      fi
      # If the package names are numbers, get the package names from the list
      for i in "${!__packages[@]}"; do
        if [[ ${__packages[$i]} =~ ^[0-9]+$ ]]; then
          __packages[$i]=$(rosls | sed -n "${__packages[$i]}p" | awk '{print $1}')
        fi
      done
      __rosbuild --packages-select "${__packages[@]}" --cmake-args -DPython3_FIND_VIRTUALENV="ONLY"
    else
      __rosbuild --packages-select "$@" --cmake-args -DPython3_FIND_VIRTUALENV="ONLY"
    fi
  }

  __rosnew() {
    # Extract the build type and package name
    local build_type="$1"
    local __packages="$2"
    shift 3

    # Navigate to the source directory and create the package
    rossrc && ros2 pkg create --license Apache-2.0 --build-type "$build_type" "$__packages"
    touch "$__packages"/"$__packages"/"$__packages".py

    # Parse the combined arguments (remaining flags)
    for arg in "$@"; do
      case "$arg" in
      *u*) # Create urdf directory and file
        mkdir -p "$__packages"/urdf
        touch "$__packages"/urdf/"$__packages".urdf
        ;&
      *l*) # Create launch directory and file
        mkdir -p "$__packages"/launch
        touch "$__packages"/launch/"$__packages".launch.py
        ;&
      *m*) # Create msg directory and file
        mkdir -p "$__packages"/msg
        touch "$__packages"/msg/"$__packages".msg
        ;&
      *s*) # Create srv directory and file
        mkdir -p "$__packages"/srv
        touch "$__packages"/srv/"$__packages".srv
        ;&
      *a*) # Create action directory and file
        mkdir -p "$__packages"/action
        touch "$__packages"/action/"$__packages".action
        ;;
      esac
    done

    cd -
  }

  rosnewp() { __rosnew ament_python "$1" "$@"; }

  rosnewc() { __rosnew ament_cmake "$1" "$@"; }

  alias rospkgs='ros2 pkg list'
  alias rosnds='ros2 node list'
  alias rostops='ros2 topic list'
  alias rosifs='ros2 interface list'
  alias rossrvs='ros2 service list'
  alias rosacts='ros2 action list'

  rosvtf() { ros2 run tf2_tools view_frames; }

  rosvurdf() { ros2 launch urdf_tutorial display.launch.py model:=${ROS_WSPACE}/"$1"; }

  rosdepi() { rosdep install --from-paths src/"$@" --ignore-src -r -y; }

  rostopecho() { ros2 topic echo "$1"; }

  rosiff() {
    echo '############## Description ##############'
    ros2 interface show "$1"
    echo '############### Prototype ###############'
    ros2 interface proto "$1"
    echo '#########################################'
  }

  roslurdf() {
    # Command requires the absolute path. Check if it throws error
    if ! ros2 launch urdf_tutorial display.launch.py model:="$1" >/dev/null 2>&1; then
      # Check if the file exists in the current directory
      if [ -f "$1" ]; then
        ros2 launch urdf_tutorial display.launch.py model:=$(pwd)/"$1" >/dev/null 2>&1
        return
      fi
      # Check if the file exists in the workspace
      if [ -f "$ROS_WS"/src/"$1" ]; then
        ros2 launch urdf_tutorial display.launch.py model:="$ROS_WS"/src/"$1" >/dev/null 2>&1
        return
      fi
      # If all attempts fail, print an error message
      echo "游딩 Error: Failed to launch URDF model '$1'. File not found or launch failed."
      return 1
    fi
  }

  ############################################################################################

  # Source the ROS setup file for the extracted distribution
  if source /opt/ros/${ROS_DISTRO}/setup.bash 2>/dev/null; then
    echo "游딫 using ros-$ROS_DISTRO on $ROS_WS"
  else
    error_message=$(source /opt/ros/${ROS_DISTRO}/setup.bash 2>&1)
    echo "游딩 error with ros-$ROS_DISTRO: $error_message"
    return
  fi

  # Navigate to workspace directory
  cd $ROS_WS

  # Check if the workspace setup exists
  if [ -f "$ROS_LOCAL_SETUP" ]; then
    if rosset 2>/dev/null; then
      echo "游딫 sourcing $ROS_LOCAL_SETUP"
    else
      error_message=$(rosset 2>&1)
      echo "游딩 error with $ROS_LOCAL_SETUP: $error_message"
      return
    fi
  else
    # Create the workspace and build it
    echo "游딫 creating workspace"
    colcon build --symlink-install
    rsetup
  fi

}

# >>> ros initialize >>>
rosinstall() {
  # Enable Ubuntu Universe repo
  sudo apt install --reinstall -y software-properties-common
  sudo add-apt-repository -y universe
  # Add ROS 2 GPG key
  sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
  # Add ROS 2 repo
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list >/dev/null
  # Enable development tools
  sudo apt update && sudo apt install --reinstall -y ros-dev-tools
  sudo apt update && sudo apt upgrade -y
  # Install ROS, RViz, Demos, Tutorials
  sudo apt install --reinstall -y ros-$ROS_DISTRO-desktop
  # Install Gazebo Simulation for your robots
  sudo apt install --reinstall -y ros-$ROS_DISTRO-ros-gz
  # Install ROS 2 command line tools
  sudo apt install --reinstall -y ros-$ROS_DISTRO-urdf-tutorial
  # Install plugins for rviz dark theme
  sudo apt install --reinstall -y qt5-style-plugins
  # Find which python version ROS 2 is using
  export PYTHON_VERSION=$(ls /opt/ros/$ROS_DISTRO/lib/ | grep -oP 'python\K[0-9.]+')
  # Check if miniconda installed
  if [ ! -d $CONDA_HOME ]; then
    # Install Miniconda3 for Python3 virtual environment
    curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/Miniconda3-latest-Linux-x86_64.sh
    sudo -E sh /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p $CONDA_HOME
    sudo chown -R $USER:$USER ~/.condarc ~/.conda ~/.continuum 2>/dev/null
    $CONDA_EXEC init && source ~/.bashrc
  fi
  # Create conda environment for ROS 2
  $CONDA_EXEC create -y -p $CONDA_HOME/envs/$ROS_DISTRO python=$PYTHON_VERSION catkin_pkg
  export ENV_PATH=$($CONDA_EXEC env list | grep $ROS_DISTRO | awk '{print $NF}')
  # Make ROS 2 python modules available to conda environment
  echo "/opt/ros/$ROS_DISTRO/lib/python$PYTHON_VERSION/site-packages/" | sudo tee $ENV_PATH/lib/python$PYTHON_VERSION/site-packages/$ROS_DISTRO.pth >/dev/null
}

rosactivate() {
  if [ -f ./install/local_setup.bash ]; then
    echo "游딫 ros workspace detected, activating symlink"
    rm -f ~/ros2_ws && ln -s $(pwd -P) ~/ros2_ws
    echo "游딫 "$(ls -l --color=always ~/ros2_ws | awk '/->/ {print $9, $10, $11}')
    echo "游딫 symlink created, activating rosrc"
    __rosrc
    echo "游딫 ros workspace activated"

  else
    if [ ! "$1" == "--quite" ]; then
      echo "游딩 no ros workspace detected, please run 'rosinit' to initialize a new workspace"
    fi
  fi
}

rosinit() {
  if [ ! -f ./install/local_setup.bash ]; then
    colcon build >>/dev/null 2>&1
    mkdir -p src
    echo "游딫 ros workspace created"
    rosactivate
  else
    echo "游딩 ros workspace already exists, please run 'rosactivate' to activate it"
  fi
}

rosuninstall() {
  sudo -E $CONDA_HOME/uninstall.sh --remove-caches --remove-config-files user --remove-user-data
  sudo apt remove ~nros-$ROS_DISTRO-* && sudo apt autoremove
  sudo rm /etc/apt/sources.list.d/ros2.list
  sed -i '/source ~\/.rosrc/d' ~/.bashrc
  sudo rm ~/.rosrc
  sudo apt update
  sudo apt autoremove
  sudo apt upgrade
}

rosactivate --quite
# <<< ros initialize <<<
